using System;
using UnityEngine;

[Serializable]
/// <summary>
/// Single axis controls.
/// A control used when the input is composed of only a froward/backward and a left/right turn.
/// </summary>
public class SingleAxisControls : BaseControls {

    public float walkSpeed;
    public float turnSpeed;
#if UNITY_ANDROID
	public bool hasGyro;
	public bool useSwipeWalking = false;

	/// <summary>
	/// Gets the touch input from the android device and converts this to a value indicating the walking speed.
	/// </summary>
	/// <returns>the generated speed value</returns>
	public float getTouchInput ()	{
		if (Input.touchCount == 4) {
			useSwipeWalking = !useSwipeWalking;
		}
		if (Input.touchCount != 1) return 0;

		if (useSwipeWalking) {
			float delta = Input.GetTouch (0).deltaPosition.y;

			// debounce
			if (delta < 1f && delta > -1f) {
				return 0;
			}

			return delta > 0 ? .5f : -.5f;
		} else {
			return Input.GetTouch (0).position.y > Screen.height / 2 ? .5f : -.5f;
		}
	}

	/// <summary>
	/// Checks if the gyroscope can be used, enables the compass otherwise.
	/// </summary>
    public override void OnEnable() {
		Input.location.Start();
		hasGyro = SystemInfo.supportsGyroscope;
		if (hasGyro) {
			Input.gyro.enabled = true;
			Debug.Log("Gyroscope enabled");
		} else {
			Input.compass.enabled = true;
			Debug.Log("Compas enabled. This device does not support a gyroscope");
		}
#else
	/// <summary>
	/// Called when this control is enabled.
	/// </summary>
	public override void OnEnable() {
#endif
    }
	
	/// <summary>
	/// Gets the movement vector of the player.
	/// </summary>
	/// <returns>The new movement vector</returns>
	/// <param name="current">the current movement vector</param>
    public override UnityEngine.Vector3 GetMove(Vector3 current) {
        Vector3 forward = CameraManager.GetCameraForwardMovementVector();
#if UNITY_ANDROID
		return forward * Time.deltaTime * walkSpeed * getTouchInput();
#else
		return forward * Time.deltaTime * walkSpeed * Input.GetAxis("Vertical");
#endif
    }
	
	/// <summary>
	/// Gets the relative rotation of the player.
	/// </summary>
	/// <returns>The rotation generated by either the gyroscope or the compass.</returns>
	/// <param name="current">The current rotation o tha player</param>
    public override UnityEngine.Quaternion GetRotation(Quaternion current) {
#if UNITY_ANDROID
		if (hasGyro) {
			return Input.gyro.attitude;
		} else {
			return Quaternion.AngleAxis(Input.compass.trueHeading - current.eulerAngles.y, Vector3.up);
		}
#else
        float turned = Time.deltaTime * turnSpeed * Input.GetAxis("Horizontal");
        return Quaternion.AngleAxis(turned, Vector3.up);
#endif
    }
	
	/// <summary>
	/// Called when this control is disabled.
	/// When using touch controls, this disables the gyro/compass
	/// </summary>
    public override void OnDisable() {
        if (hasGyro) {
			Input.gyro.enabled = false;
		} else {
			Input.compass.enabled = false;
		}
    }
}
